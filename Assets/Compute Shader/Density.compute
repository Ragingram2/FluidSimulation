// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Density
struct FluidParticle
{
    float3 position;
    
    float dt;
    float diff;
    float visc;
    
    float s;
    float density;
    
    float Vx;
    float Vy;
    float Vz;

    float Vx0;
    float Vy0;
    float Vz0;
};

RWStructuredBuffer<FluidParticle> particles;
uint sizeX = 10;
uint sizeY = 10;
uint sizeZ = 10;

uint3 POS(uint index)
{
    uint x = index % sizeX;
    uint y = (index / sizeX) % sizeY;
    uint z = index / (sizeX * sizeY);

    return uint3(x, y, z);
}

uint IX(uint3 pos)
{
    return pos.x + sizeX * (pos.y + sizeY * pos.z);
}

uint IX(uint x, uint y, uint z)
{
    return IX(uint3(x, y, z));
}

void set_bnd1(int id, int b, int N)
{
    float3 pos = POS(id);
    float i, j, k;
    
    i = pos.x;
    j = pos.y;
    k = pos.z;
    
    if (sizeZ > 2)
    {
        particles[IX(i, j, 0)].s = b == 3 ? -particles[IX(i, j, 1)].s : particles[IX(i, j, 1)].s;
        particles[IX(i, j, sizeZ - 1)].s = b == 3 ? -particles[IX(i, j, sizeZ - 2)].s : particles[IX(i, j, sizeZ - 2)].s;
    }
    if (sizeY > 2)
    {
        particles[IX(i, 0, k)].s = b == 2 ? -particles[IX(i, 1, k)].s : particles[IX(i, 1, k)].s;
        particles[IX(i, sizeY - 1, k)].s = b == 2 ? -particles[IX(i, sizeY - 2, k)].s : particles[IX(i, sizeY - 2, k)].s;
    }
    if (sizeY > 2)
    {
        particles[IX(0, j, k)].s = b == 1 ? -particles[IX(1, j, k)].s : particles[IX(1, j, k)].s;
        particles[IX(sizeZ - 1, j, k)].s = b == 1 ? -particles[IX(sizeZ - 2, j, k)].s : particles[IX(sizeZ - 2, j, k)].s;
    }
}

void set_bnd2(int id, int b, int N)
{
    float3 pos = POS(id);
    float i, j, k;
    
    i = pos.x;
    j = pos.y;
    k = pos.z;
    
    if (sizeZ > 2)
    {
        particles[IX(i, j, 0)].density = b == 3 ? -particles[IX(i, j, 1)].density : particles[IX(i, j, 1)].density;
        particles[IX(i, j, sizeZ - 1)].density = b == 3 ? -particles[IX(i, j, sizeZ - 2)].density : particles[IX(i, j, sizeZ - 2)].density;
    }
    
    if (sizeY > 2)
    {
        particles[IX(i, 0, k)].density = b == 2 ? -particles[IX(i, 1, k)].density : particles[IX(i, 1, k)].density;
        particles[IX(i, sizeY - 1, k)].density = b == 2 ? -particles[IX(i, sizeY - 2, k)].density : particles[IX(i, sizeY - 2, k)].density;
    }
    
    if (sizeY > 2)
    {
        particles[IX(0, j, k)].density = b == 1 ? -particles[IX(1, j, k)].density : particles[IX(1, j, k)].density;
        particles[IX(sizeX - 1, j, k)].density = b == 1 ? -particles[IX(sizeX - 2, j, k)].density : particles[IX(sizeX - 2, j, k)].density;
    }
}

void lin_solve(float id, int b, float x, float x0, float a, float c, int iter, int N)
{
    //if (c == 0)
    //{
    //    c = 0.00001f;
    //}
    
    float cRecip = 1.0f / c;
    float3 pos = POS(id.x);
    int i, j, m;
    i = pos.x;
    j = pos.y;
    m = pos.z;

 
    float temp = (particles[id].density
                            + a * (particles[IX(i + 1, j, m)].s
                                    + particles[IX(i - 1, j, m)].s
                                    + particles[IX(i, j + 1, m)].s
                                    + particles[IX(i, j - 1, m)].s
                                    + particles[IX(i, j, m + 1)].s
                                    + particles[IX(i, j, m - 1)].s
                           )) * cRecip;

    particles[id].s = temp;
    
        
    set_bnd1(id, b, N);

}

void Diffuse(int id, int b, float x, float x0, float diff, float dt, int iter, int N)
{
    float a = dt * diff * (N - 2) * (N - 2);
    lin_solve(id, b, x, x0, a, 1 + 6 * abs(a), iter, N);
}

void Advect(int id, int b, float d, float d0, float velocX, float velocY, float velocZ, float dt, float N)
{
    float3 pos = POS(id);
    float i0, i1, j0, j1, k0, k1;
    
    float dtx = dt * (sizeX - 2);
    float dty = dt * (sizeY - 2);
    float dtz = dt * (sizeZ - 2);
    
    float s0, s1, t0, t1, u0, u1;
    float tmp1, tmp2, tmp3, x, y, z;
    
    tmp1 = dtx * particles[id.x].Vx;
    tmp2 = dty * particles[id.x].Vy;
    tmp3 = dtz * particles[id.x].Vz;
    x = pos.x - tmp1;
    y = pos.y - tmp2;
    z = pos.z - tmp3;
                
    if (x < 0.5f)
        x = 0.5f;
    if (x > sizeX + 0.5f)
        x = sizeX + 0.5f;
    i0 = int(x);
    i1 = i0 + 1.0f;
    if (y < 0.5f)
        y = 0.5f;
    if (y > sizeY + 0.5f)
        y = sizeY + 0.5f;
    j0 = int(y);
    j1 = j0 + 1.0f;
    if (z < 0.5f)
        z = 0.5f;
    if (z > sizeZ + 0.5f)
        z = sizeZ + 0.5f;
    k0 = int(z);
    k1 = k0 + 1.0f;
                
    s1 = x - i0;
    s0 = 1.0f - s1;
    t1 = y - j0;
    t0 = 1.0f - t1;
    u1 = z - k0;
    u0 = 1.0f - u1;
    
                
    int i0i = i0;
    int i1i = i1;
    int j0i = j0;
    int j1i = j1;
    int k0i = k0;
    int k1i = k1;
                
    particles[id].density =
                    s0 * (t0 * (u0 * particles[IX(i0i, j0i, k0i)].s
                                + u1 * particles[IX(i0i, j0i, k1i)].s)
                        + (t1 * (u0 * particles[IX(i0i, j1i, k0i)].s
                                + u1 * particles[IX(i0i, j1i, k1i)].s)))
                   + s1 * (t0 * (u0 * particles[IX(i1i, j0i, k0i)].s
                                + u1 * particles[IX(i1i, j0i, k1i)].s)
                        + (t1 * (u0 * particles[IX(i1i, j1i, k0i)].s
                                + u1 * particles[IX(i1i, j1i, k1i)].s)));
    
    set_bnd2(id, b, N);
}

[numthreads(1, 1, 1)]
void Density(uint3 id : SV_DispatchThreadID)
{
    //particles[id.x].s = IX(POS(id.x));
    Diffuse(id.x, 0, particles[id.x].s, particles[id.x].density, particles[id.x].diff, particles[id.x].dt, 4, sizeX);
    Advect(id.x, 0, particles[id.x].density, particles[id.x].s, particles[id.x].Vx, particles[id.x].Vy, particles[id.x].Vz, particles[id.x].dt, sizeX);
}
